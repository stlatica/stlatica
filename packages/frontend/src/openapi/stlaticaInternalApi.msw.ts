/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * stlatica_internal_api
 * stlatica internal api
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";
import { http, HttpResponse, delay } from "msw";
import type {
  Plat,
  UploadImage201,
  User,
  UserID,
  UserLightweight,
} from "./stlaticaInternalApi.schemas";

export const getGetUserResponseMock = (overrideResponse: Partial<User> = {}): User => ({
  followers_count: faker.number.int({ min: undefined, max: undefined }),
  following_count: faker.number.int({ min: undefined, max: undefined }),
  icon: faker.word.sample(),
  is_public: faker.datatype.boolean(),
  summary: faker.word.sample(),
  user_id: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getCreateUserResponseMock = (): UserID => faker.word.sample();

export const getGetUsersResponseMock = (): User[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    followers_count: faker.number.int({ min: undefined, max: undefined }),
    following_count: faker.number.int({ min: undefined, max: undefined }),
    icon: faker.word.sample(),
    is_public: faker.datatype.boolean(),
    summary: faker.word.sample(),
    user_id: faker.word.sample(),
    username: faker.word.sample(),
  }));

export const getGetFollowUsersResponseMock = (): UserLightweight[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    icon: faker.word.sample(),
    is_public: faker.datatype.boolean(),
    summary: faker.word.sample(),
    user_id: faker.word.sample(),
    username: faker.word.sample(),
  }));

export const getGetFollowersResponseMock = (): UserLightweight[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    icon: faker.word.sample(),
    is_public: faker.datatype.boolean(),
    summary: faker.word.sample(),
    user_id: faker.word.sample(),
    username: faker.word.sample(),
  }));

export const getGetPlatResponseMock = (overrideResponse: Partial<Plat> = {}): Plat => ({
  content: faker.word.sample(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  favorite_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  image_urls: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.word.sample(),
    ),
    undefined,
  ]),
  plat_id: faker.word.sample(),
  replat_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  reply_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  user_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetTimelineResponseMock = (): Plat[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    content: faker.word.sample(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    favorite_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    image_urls: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.word.sample(),
      ),
      undefined,
    ]),
    plat_id: faker.word.sample(),
    replat_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    reply_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    user_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetTimelineByQueryResponseMock = (): Plat[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    content: faker.word.sample(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    favorite_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    image_urls: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.word.sample(),
      ),
      undefined,
    ]),
    plat_id: faker.word.sample(),
    replat_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    reply_count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    user_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetImageResponseMock = (): string => faker.word.sample();

export const getUploadImageResponseMock = (
  overrideResponse: Partial<UploadImage201> = {},
): UploadImage201 => ({
  image_id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getGetUserMockHandler = (
  overrideResponse?:
    | User
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User),
) => {
  return http.get("*/internal/v1/users/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteUserMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
) => {
  return http.delete("*/internal/v1/users/:userId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getCreateUserMockHandler = (
  overrideResponse?:
    | UserID
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserID> | UserID),
) => {
  return http.post("*/internal/v1/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateUserResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetUsersMockHandler = (
  overrideResponse?:
    | User[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[]),
) => {
  return http.get("*/internal/v1/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetFollowUsersMockHandler = (
  overrideResponse?:
    | UserLightweight[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserLightweight[]> | UserLightweight[]),
) => {
  return http.get("*/internal/v1/users/:userId/follows", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFollowUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetFollowersMockHandler = (
  overrideResponse?:
    | UserLightweight[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserLightweight[]> | UserLightweight[]),
) => {
  return http.get("*/internal/v1/users/:userId/followers", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFollowersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostFollowMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post("*/internal/v1/users/:userId/follow", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteFollowMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
) => {
  return http.delete("*/internal/v1/users/:userId/follow", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getGetPlatMockHandler = (
  overrideResponse?:
    | Plat
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Plat> | Plat),
) => {
  return http.get("*/internal/v1/plats/:platId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPlatResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePlatMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
) => {
  return http.delete("*/internal/v1/plats/:platId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getPostFavoriteMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post("*/internal/v1/plats/:platId/favorites", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteFavoriteMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
) => {
  return http.delete("*/internal/v1/plats/:platId/favorites", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getPostPlatMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post("*/internal/v1/plats", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getGetTimelineMockHandler = (
  overrideResponse?:
    | Plat[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Plat[]> | Plat[]),
) => {
  return http.get("*/internal/v1/timelines/:timelineId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTimelineResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTimelineByQueryMockHandler = (
  overrideResponse?:
    | Plat[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Plat[]> | Plat[]),
) => {
  return http.get("*/internal/v1/timelines", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTimelineByQueryResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetImageMockHandler = (
  overrideResponse?:
    | string
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string),
) => {
  return http.get("*/internal/v1/images/:imageId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetImageResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUploadImageMockHandler = (
  overrideResponse?:
    | UploadImage201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UploadImage201> | UploadImage201),
) => {
  return http.post("*/internal/v1/images", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUploadImageResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLoginMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void),
) => {
  return http.post("*/internal/v1/login", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getStlaticaInternalApiMock = () => [
  getGetUserMockHandler(),
  getDeleteUserMockHandler(),
  getCreateUserMockHandler(),
  getGetUsersMockHandler(),
  getGetFollowUsersMockHandler(),
  getGetFollowersMockHandler(),
  getPostFollowMockHandler(),
  getDeleteFollowMockHandler(),
  getGetPlatMockHandler(),
  getDeletePlatMockHandler(),
  getPostFavoriteMockHandler(),
  getDeleteFavoriteMockHandler(),
  getPostPlatMockHandler(),
  getGetTimelineMockHandler(),
  getGetTimelineByQueryMockHandler(),
  getGetImageMockHandler(),
  getUploadImageMockHandler(),
  getLoginMockHandler(),
];
