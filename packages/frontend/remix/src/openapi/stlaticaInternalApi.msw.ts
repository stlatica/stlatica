/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * stlatica_internal_api
 * stlatica internal api
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Plat,
  User,
  UserID
} from './stlaticaInternalApi.schemas'

export const getGetUserResponseMock = (overrideResponse: any = {}): User => ({followers_count: faker.number.int({min: undefined, max: undefined}), following_count: faker.number.int({min: undefined, max: undefined}), icon: faker.word.sample(), is_public: faker.datatype.boolean(), summary: faker.word.sample(), user_id: faker.word.sample(), username: faker.word.sample(), ...overrideResponse})

export const getCreateUserResponseMock = (): UserID => (faker.word.sample())

export const getGetUsersResponseMock = (overrideResponse: any = {}): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({followers_count: faker.number.int({min: undefined, max: undefined}), following_count: faker.number.int({min: undefined, max: undefined}), icon: faker.word.sample(), is_public: faker.datatype.boolean(), summary: faker.word.sample(), user_id: faker.word.sample(), username: faker.word.sample(), ...overrideResponse})))

export const getGetPlatResponseMock = (overrideResponse: any = {}): Plat => ({content: faker.word.sample(), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), plat_id: faker.word.sample(), ...overrideResponse})

export const getGetTimelineResponseMock = (overrideResponse: any = {}): Plat[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), plat_id: faker.word.sample(), ...overrideResponse})))

export const getGetTimelineByQueryResponseMock = (overrideResponse: any = {}): Plat[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), plat_id: faker.word.sample(), ...overrideResponse})))

export const getGetImageResponseMock = (): string => (faker.word.sample())


export const getGetUserMockHandler = (overrideResponse?: User) => {
  return http.get('*/internal/v1/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteUserMockHandler = () => {
  return http.delete('*/internal/v1/users/:userId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateUserMockHandler = (overrideResponse?: UserID) => {
  return http.post('*/internal/v1/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCreateUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetUsersMockHandler = (overrideResponse?: User[]) => {
  return http.get('*/internal/v1/users', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetUsersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetPlatMockHandler = (overrideResponse?: Plat) => {
  return http.get('*/internal/v1/plats/:platId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetPlatResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeletePlatMockHandler = () => {
  return http.delete('*/internal/v1/plats/:platId', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostFavoriteMockHandler = () => {
  return http.post('*/internal/v1/plats/:platId/favorites', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteFavoriteMockHandler = () => {
  return http.delete('*/internal/v1/plats/:platId/favorites', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostPlatMockHandler = () => {
  return http.post('*/internal/v1/plats', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetTimelineMockHandler = (overrideResponse?: Plat[]) => {
  return http.get('*/internal/v1/timelines/:timelineId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetTimelineResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetTimelineByQueryMockHandler = (overrideResponse?: Plat[]) => {
  return http.get('*/internal/v1/timelines', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetTimelineByQueryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetImageMockHandler = (overrideResponse?: string) => {
  return http.get('*/internal/v1/images/:imageId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetImageResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLoginMockHandler = () => {
  return http.post('*/internal/v1/login', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getStlaticaInternalApiMock = () => [
  getGetUserMockHandler(),
  getDeleteUserMockHandler(),
  getCreateUserMockHandler(),
  getGetUsersMockHandler(),
  getGetPlatMockHandler(),
  getDeletePlatMockHandler(),
  getPostFavoriteMockHandler(),
  getDeleteFavoriteMockHandler(),
  getPostPlatMockHandler(),
  getGetTimelineMockHandler(),
  getGetTimelineByQueryMockHandler(),
  getGetImageMockHandler(),
  getLoginMockHandler()
]
