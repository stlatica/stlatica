/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * stlatica_internal_api
 * stlatica internal api
 * OpenAPI spec version: 0.1.0
 */
export type LoginBody = {
  password?: string;
  preferred_user_id?: string;
};

export type GetUsersParams = {
/**
 * ユーザ名
 */
user_name?: string;
};

export type CreateUserBody = {
  email?: string;
  name?: string;
};

export type TimelineToDateParameter = string;

export type TimelineLimitParameter = number;

/**
 * timelineの種類
- home: 指定したuser_idのplatの配列
- following: 指定したuser_idのfollowingのplatの配列
- local: インスタンス内の全てのplatの配列

 */
export type TimelineTypeParameter = typeof TimelineTypeParameter[keyof typeof TimelineTypeParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimelineTypeParameter = {
  home: 'home',
  following: 'following',
  local: 'local',
} as const;

export type TimelineUserIdParameter = string;

export type GetTimelineByQueryParams = {
user_id: TimelineUserIdParameter;
type: TimelineTypeParameter;
limit?: TimelineLimitParameter;
to_date?: TimelineToDateParameter;
};

/**
 * plat
 */
export interface PlatPost {
  /** platの本文 */
  content: string;
  user_id: UserID;
}

/**
 * platを識別するための一意のID

 */
export type PlatID = string;

/**
 * plat
 */
export interface Plat {
  /** platの本文 */
  content: string;
  /** platが作成された日時(ISO8601) */
  created_at: string;
  /** platに添付された画像のURL */
  images?: string[];
  plat_id: PlatID;
}

export type ErrorResponseCode = typeof ErrorResponseCode[keyof typeof ErrorResponseCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorResponseCode = {
  BAD_REQUEST: 'BAD_REQUEST',
  MISSING_PARAMETER: 'MISSING_PARAMETER',
  UNAUTHORIZED: 'UNAUTHORIZED',
  NOT_FOUND: 'NOT_FOUND',
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
  CONFLICT: 'CONFLICT',
  UNPROCESSABLE_ENTITY: 'UNPROCESSABLE_ENTITY',
} as const;

export interface ErrorResponse {
  code: ErrorResponseCode;
  message: string;
}

/**
 * userを識別するための一意のID

 */
export type UserID = string;

/**
 * user
 */
export interface User {
  /** follower数 */
  followers_count: number;
  /** following数 */
  following_count: number;
  /** ユーザのアイコン画像のURL */
  icon: string;
  /** 公開アカウントであるかどうか \
external apiのmanuallyApprovesFollowersと同一の値となる
 */
  is_public: boolean;
  /** ユーザのプロフィール */
  summary: string;
  user_id: UserID;
  /** 画面上に表示されるユーザ名 */
  username: string;
}

