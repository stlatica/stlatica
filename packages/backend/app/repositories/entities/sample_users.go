// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SampleUser is an object representing the database table.
type SampleUser struct { // ulid
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Unix time
	UpdatedAt types.UnixTime `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *sampleUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sampleUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SampleUserColumns = struct {
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SampleUserTableColumns = struct {
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	UserID:    "sample_users.user_id",
	CreatedAt: "sample_users.created_at",
	UpdatedAt: "sample_users.updated_at",
}

// Generated where

var SampleUserWhere = struct {
	UserID    whereHelperstring
	CreatedAt whereHelpertypes_UnixTime
	UpdatedAt whereHelpertypes_UnixTime
}{
	UserID:    whereHelperstring{field: "`sample_users`.`user_id`"},
	CreatedAt: whereHelpertypes_UnixTime{field: "`sample_users`.`created_at`"},
	UpdatedAt: whereHelpertypes_UnixTime{field: "`sample_users`.`updated_at`"},
}

// SampleUserRels is where relationship names are stored.
var SampleUserRels = struct {
}{}

// sampleUserR is where relationships are stored.
type sampleUserR struct {
}

// NewStruct creates a new relationship struct
func (*sampleUserR) NewStruct() *sampleUserR {
	return &sampleUserR{}
}

// sampleUserL is where Load methods for each relationship are stored.
type sampleUserL struct{}

var (
	sampleUserAllColumns            = []string{"user_id", "created_at", "updated_at"}
	sampleUserColumnsWithoutDefault = []string{"user_id", "created_at", "updated_at"}
	sampleUserColumnsWithDefault    = []string{}
	sampleUserPrimaryKeyColumns     = []string{"user_id"}
	sampleUserGeneratedColumns      = []string{}
)

type (
	// SampleUserSlice is an alias for a slice of pointers to SampleUser.
	// This should almost always be used instead of []SampleUser.
	SampleUserSlice []*SampleUser

	sampleUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sampleUserType                 = reflect.TypeOf(&SampleUser{})
	sampleUserMapping              = queries.MakeStructMapping(sampleUserType)
	sampleUserPrimaryKeyMapping, _ = queries.BindMapping(sampleUserType, sampleUserMapping, sampleUserPrimaryKeyColumns)
	sampleUserInsertCacheMut       sync.RWMutex
	sampleUserInsertCache          = make(map[string]insertCache)
	sampleUserUpdateCacheMut       sync.RWMutex
	sampleUserUpdateCache          = make(map[string]updateCache)
	sampleUserUpsertCacheMut       sync.RWMutex
	sampleUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single sampleUser record from the query.
func (q sampleUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SampleUser, error) {
	o := &SampleUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for sample_users")
	}

	return o, nil
}

// All returns all SampleUser records from the query.
func (q sampleUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (SampleUserSlice, error) {
	var o []*SampleUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to SampleUser slice")
	}

	return o, nil
}

// Count returns the count of all SampleUser records in the query.
func (q sampleUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count sample_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sampleUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if sample_users exists")
	}

	return count > 0, nil
}

// SampleUsers retrieves all the records using an executor.
func SampleUsers(mods ...qm.QueryMod) sampleUserQuery {
	mods = append(mods, qm.From("`sample_users`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sample_users`.*"})
	}

	return sampleUserQuery{q}
}

// FindSampleUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSampleUser(ctx context.Context, exec boil.ContextExecutor, userID string, selectCols ...string) (*SampleUser, error) {
	sampleUserObj := &SampleUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sample_users` where `user_id`=?", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, sampleUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from sample_users")
	}

	return sampleUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SampleUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no sample_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sampleUserInsertCacheMut.RLock()
	cache, cached := sampleUserInsertCache[key]
	sampleUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sampleUserAllColumns,
			sampleUserColumnsWithDefault,
			sampleUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sampleUserType, sampleUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sampleUserType, sampleUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sample_users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sample_users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sample_users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sampleUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into sample_users")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for sample_users")
	}

CacheNoHooks:
	if !cached {
		sampleUserInsertCacheMut.Lock()
		sampleUserInsertCache[key] = cache
		sampleUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SampleUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SampleUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	sampleUserUpdateCacheMut.RLock()
	cache, cached := sampleUserUpdateCache[key]
	sampleUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sampleUserAllColumns,
			sampleUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update sample_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sample_users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sampleUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sampleUserType, sampleUserMapping, append(wl, sampleUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update sample_users row")
	}

	if !cached {
		sampleUserUpdateCacheMut.Lock()
		sampleUserUpdateCache[key] = cache
		sampleUserUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q sampleUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for sample_users")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SampleUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sample_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in sampleUser slice")
	}

	return nil
}

// Delete deletes a single SampleUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SampleUser) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no SampleUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sampleUserPrimaryKeyMapping)
	sql := "DELETE FROM `sample_users` WHERE `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from sample_users")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q sampleUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no sampleUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from sample_users")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SampleUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sample_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from sampleUser slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SampleUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSampleUser(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SampleUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sample_users`.* FROM `sample_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sampleUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in SampleUserSlice")
	}

	*o = slice

	return nil
}

// SampleUserExists checks if the SampleUser row exists.
func SampleUserExists(ctx context.Context, exec boil.ContextExecutor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sample_users` where `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if sample_users exists")
	}

	return exists, nil
}

// Exists checks if the SampleUser row exists.
func (o *SampleUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SampleUserExists(ctx, exec, o.UserID)
}
