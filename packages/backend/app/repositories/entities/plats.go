// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Plat is an object representing the database table.
type Plat struct { // ulid
	PlatID types.PlatID `boil:"plat_id" json:"plat_id" toml:"plat_id" yaml:"plat_id"`
	// actor_id
	ActorID types.ActorID `boil:"actor_id" json:"actor_id" toml:"actor_id" yaml:"actor_id"`
	// body text
	Content string `boil:"content" json:"content" toml:"content" yaml:"content"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *platR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L platL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlatColumns = struct {
	PlatID    string
	ActorID   string
	Content   string
	CreatedAt string
}{
	PlatID:    "plat_id",
	ActorID:   "actor_id",
	Content:   "content",
	CreatedAt: "created_at",
}

var PlatTableColumns = struct {
	PlatID    string
	ActorID   string
	Content   string
	CreatedAt string
}{
	PlatID:    "plats.plat_id",
	ActorID:   "plats.actor_id",
	Content:   "plats.content",
	CreatedAt: "plats.created_at",
}

// Generated where

type whereHelpertypes_PlatID struct{ field string }

func (w whereHelpertypes_PlatID) EQ(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_PlatID) NEQ(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_PlatID) LT(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_PlatID) LTE(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_PlatID) GT(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_PlatID) GTE(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlatWhere = struct {
	PlatID    whereHelpertypes_PlatID
	ActorID   whereHelpertypes_ActorID
	Content   whereHelperstring
	CreatedAt whereHelpertypes_UnixTime
}{
	PlatID:    whereHelpertypes_PlatID{field: "`plats`.`plat_id`"},
	ActorID:   whereHelpertypes_ActorID{field: "`plats`.`actor_id`"},
	Content:   whereHelperstring{field: "`plats`.`content`"},
	CreatedAt: whereHelpertypes_UnixTime{field: "`plats`.`created_at`"},
}

// PlatRels is where relationship names are stored.
var PlatRels = struct {
}{}

// platR is where relationships are stored.
type platR struct {
}

// NewStruct creates a new relationship struct
func (*platR) NewStruct() *platR {
	return &platR{}
}

// platL is where Load methods for each relationship are stored.
type platL struct{}

var (
	platAllColumns            = []string{"plat_id", "actor_id", "content", "created_at"}
	platColumnsWithoutDefault = []string{"plat_id", "actor_id", "content", "created_at"}
	platColumnsWithDefault    = []string{}
	platPrimaryKeyColumns     = []string{"plat_id"}
	platGeneratedColumns      = []string{}
)

type (
	// PlatSlice is an alias for a slice of pointers to Plat.
	// This should almost always be used instead of []Plat.
	PlatSlice []*Plat

	platQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	platType                 = reflect.TypeOf(&Plat{})
	platMapping              = queries.MakeStructMapping(platType)
	platPrimaryKeyMapping, _ = queries.BindMapping(platType, platMapping, platPrimaryKeyColumns)
	platInsertCacheMut       sync.RWMutex
	platInsertCache          = make(map[string]insertCache)
	platUpdateCacheMut       sync.RWMutex
	platUpdateCache          = make(map[string]updateCache)
	platUpsertCacheMut       sync.RWMutex
	platUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single plat record from the query.
func (q platQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plat, error) {
	o := &Plat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for plats")
	}

	return o, nil
}

// All returns all Plat records from the query.
func (q platQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlatSlice, error) {
	var o []*Plat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to Plat slice")
	}

	return o, nil
}

// Count returns the count of all Plat records in the query.
func (q platQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count plats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q platQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if plats exists")
	}

	return count > 0, nil
}

// Plats retrieves all the records using an executor.
func Plats(mods ...qm.QueryMod) platQuery {
	mods = append(mods, qm.From("`plats`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plats`.*"})
	}

	return platQuery{q}
}

// FindPlat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlat(ctx context.Context, exec boil.ContextExecutor, platID types.PlatID, selectCols ...string) (*Plat, error) {
	platObj := &Plat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plats` where `plat_id`=?", sel,
	)

	q := queries.Raw(query, platID)

	err := q.Bind(ctx, exec, platObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from plats")
	}

	return platObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no plats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(platColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	platInsertCacheMut.RLock()
	cache, cached := platInsertCache[key]
	platInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			platAllColumns,
			platColumnsWithDefault,
			platColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(platType, platMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(platType, platMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plats` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plats` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plats` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, platPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into plats")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlatID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for plats")
	}

CacheNoHooks:
	if !cached {
		platInsertCacheMut.Lock()
		platInsertCache[key] = cache
		platInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Plat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	platUpdateCacheMut.RLock()
	cache, cached := platUpdateCache[key]
	platUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			platAllColumns,
			platPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update plats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plats` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, platPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(platType, platMapping, append(wl, platPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update plats row")
	}

	if !cached {
		platUpdateCacheMut.Lock()
		platUpdateCache[key] = cache
		platUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q platQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for plats")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, platPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in plat slice")
	}

	return nil
}

// Delete deletes a single Plat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plat) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no Plat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), platPrimaryKeyMapping)
	sql := "DELETE FROM `plats` WHERE `plat_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from plats")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q platQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no platQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from plats")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, platPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from plat slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlat(ctx, exec, o.PlatID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), platPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plats`.* FROM `plats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, platPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in PlatSlice")
	}

	*o = slice

	return nil
}

// PlatExists checks if the Plat row exists.
func PlatExists(ctx context.Context, exec boil.ContextExecutor, platID types.PlatID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plats` where `plat_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, platID)
	}
	row := exec.QueryRowContext(ctx, sql, platID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if plats exists")
	}

	return exists, nil
}

// Exists checks if the Plat row exists.
func (o *Plat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlatExists(ctx, exec, o.PlatID)
}
