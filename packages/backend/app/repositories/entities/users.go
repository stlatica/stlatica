// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBase is an object representing the database table.
type UserBase struct { // ulid
	UserID types.UserID `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// preferred user id
	PreferredUserID string `boil:"preferred_user_id" json:"preferred_user_id" toml:"preferred_user_id" yaml:"preferred_user_id"`
	// preferred user name
	PreferredUserName string `boil:"preferred_user_name" json:"preferred_user_name" toml:"preferred_user_name" yaml:"preferred_user_name"`
	// Unix time
	RegisteredAt types.UnixTime `boil:"registered_at" json:"registered_at" toml:"registered_at" yaml:"registered_at"`
	// user is public
	IsPublic bool `boil:"is_public" json:"is_public" toml:"is_public" yaml:"is_public"`
	// mail address
	MailAddress string `boil:"mail_address" json:"mail_address" toml:"mail_address" yaml:"mail_address"`
	// icon image id
	IconImageID types.ImageID `boil:"icon_image_id" json:"icon_image_id" toml:"icon_image_id" yaml:"icon_image_id"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Unix time
	UpdatedAt types.UnixTime `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBaseColumns = struct {
	UserID            string
	PreferredUserID   string
	PreferredUserName string
	RegisteredAt      string
	IsPublic          string
	MailAddress       string
	IconImageID       string
	CreatedAt         string
	UpdatedAt         string
}{
	UserID:            "user_id",
	PreferredUserID:   "preferred_user_id",
	PreferredUserName: "preferred_user_name",
	RegisteredAt:      "registered_at",
	IsPublic:          "is_public",
	MailAddress:       "mail_address",
	IconImageID:       "icon_image_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var UserBaseTableColumns = struct {
	UserID            string
	PreferredUserID   string
	PreferredUserName string
	RegisteredAt      string
	IsPublic          string
	MailAddress       string
	IconImageID       string
	CreatedAt         string
	UpdatedAt         string
}{
	UserID:            "users.user_id",
	PreferredUserID:   "users.preferred_user_id",
	PreferredUserName: "users.preferred_user_name",
	RegisteredAt:      "users.registered_at",
	IsPublic:          "users.is_public",
	MailAddress:       "users.mail_address",
	IconImageID:       "users.icon_image_id",
	CreatedAt:         "users.created_at",
	UpdatedAt:         "users.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_ImageID struct{ field string }

func (w whereHelpertypes_ImageID) EQ(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_ImageID) NEQ(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_ImageID) LT(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_ImageID) LTE(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_ImageID) GT(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_ImageID) GTE(x types.ImageID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserBaseWhere = struct {
	UserID            whereHelpertypes_UserID
	PreferredUserID   whereHelperstring
	PreferredUserName whereHelperstring
	RegisteredAt      whereHelpertypes_UnixTime
	IsPublic          whereHelperbool
	MailAddress       whereHelperstring
	IconImageID       whereHelpertypes_ImageID
	CreatedAt         whereHelpertypes_UnixTime
	UpdatedAt         whereHelpertypes_UnixTime
}{
	UserID:            whereHelpertypes_UserID{field: "`users`.`user_id`"},
	PreferredUserID:   whereHelperstring{field: "`users`.`preferred_user_id`"},
	PreferredUserName: whereHelperstring{field: "`users`.`preferred_user_name`"},
	RegisteredAt:      whereHelpertypes_UnixTime{field: "`users`.`registered_at`"},
	IsPublic:          whereHelperbool{field: "`users`.`is_public`"},
	MailAddress:       whereHelperstring{field: "`users`.`mail_address`"},
	IconImageID:       whereHelpertypes_ImageID{field: "`users`.`icon_image_id`"},
	CreatedAt:         whereHelpertypes_UnixTime{field: "`users`.`created_at`"},
	UpdatedAt:         whereHelpertypes_UnixTime{field: "`users`.`updated_at`"},
}

// UserBaseRels is where relationship names are stored.
var UserBaseRels = struct {
	UserAuthCredential        string
	Favorites                 string
	Plats                     string
	Timelines                 string
	FollowUserUserRelations   string
	FollowerUserUserRelations string
}{
	UserAuthCredential:        "UserAuthCredential",
	Favorites:                 "Favorites",
	Plats:                     "Plats",
	Timelines:                 "Timelines",
	FollowUserUserRelations:   "FollowUserUserRelations",
	FollowerUserUserRelations: "FollowerUserUserRelations",
}

// userR is where relationships are stored.
type userR struct {
	UserAuthCredential        *UserAuthCredentialBase `boil:"UserAuthCredential" json:"UserAuthCredential" toml:"UserAuthCredential" yaml:"UserAuthCredential"`
	Favorites                 FavoriteBaseSlice       `boil:"Favorites" json:"Favorites" toml:"Favorites" yaml:"Favorites"`
	Plats                     PlatBaseSlice           `boil:"Plats" json:"Plats" toml:"Plats" yaml:"Plats"`
	Timelines                 TimelineBaseSlice       `boil:"Timelines" json:"Timelines" toml:"Timelines" yaml:"Timelines"`
	FollowUserUserRelations   UserRelationBaseSlice   `boil:"FollowUserUserRelations" json:"FollowUserUserRelations" toml:"FollowUserUserRelations" yaml:"FollowUserUserRelations"`
	FollowerUserUserRelations UserRelationBaseSlice   `boil:"FollowerUserUserRelations" json:"FollowerUserUserRelations" toml:"FollowerUserUserRelations" yaml:"FollowerUserUserRelations"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (r *userR) GetUserAuthCredential() *UserAuthCredentialBase {
	if r == nil {
		return nil
	}
	return r.UserAuthCredential
}

func (r *userR) GetFavorites() FavoriteBaseSlice {
	if r == nil {
		return nil
	}
	return r.Favorites
}

func (r *userR) GetPlats() PlatBaseSlice {
	if r == nil {
		return nil
	}
	return r.Plats
}

func (r *userR) GetTimelines() TimelineBaseSlice {
	if r == nil {
		return nil
	}
	return r.Timelines
}

func (r *userR) GetFollowUserUserRelations() UserRelationBaseSlice {
	if r == nil {
		return nil
	}
	return r.FollowUserUserRelations
}

func (r *userR) GetFollowerUserUserRelations() UserRelationBaseSlice {
	if r == nil {
		return nil
	}
	return r.FollowerUserUserRelations
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"user_id", "preferred_user_id", "preferred_user_name", "registered_at", "is_public", "mail_address", "icon_image_id", "created_at", "updated_at"}
	userColumnsWithoutDefault = []string{"user_id", "preferred_user_id", "preferred_user_name", "registered_at", "is_public", "mail_address", "icon_image_id", "created_at", "updated_at"}
	userColumnsWithDefault    = []string{}
	userPrimaryKeyColumns     = []string{"user_id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserBaseSlice is an alias for a slice of pointers to UserBase.
	// This should almost always be used instead of []UserBase.
	UserBaseSlice []*UserBase

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&UserBase{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBase, error) {
	o := &UserBase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for users")
	}

	return o, nil
}

// All returns all UserBase records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBaseSlice, error) {
	var o []*UserBase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to UserBase slice")
	}

	return o, nil
}

// Count returns the count of all UserBase records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if users exists")
	}

	return count > 0, nil
}

// UserAuthCredential pointed to by the foreign key.
func (o *UserBase) UserAuthCredential(mods ...qm.QueryMod) userAuthCredentialQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserAuthCredentials(queryMods...)
}

// Favorites retrieves all the favorite's Favorites with an executor.
func (o *UserBase) Favorites(mods ...qm.QueryMod) favoriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`favorites`.`user_id`=?", o.UserID),
	)

	return Favorites(queryMods...)
}

// Plats retrieves all the plat's Plats with an executor.
func (o *UserBase) Plats(mods ...qm.QueryMod) platQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plats`.`user_id`=?", o.UserID),
	)

	return Plats(queryMods...)
}

// Timelines retrieves all the timeline's Timelines with an executor.
func (o *UserBase) Timelines(mods ...qm.QueryMod) timelineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`timelines`.`user_id`=?", o.UserID),
	)

	return Timelines(queryMods...)
}

// FollowUserUserRelations retrieves all the user_relation's UserRelations with an executor via follow_user_id column.
func (o *UserBase) FollowUserUserRelations(mods ...qm.QueryMod) userRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_relations`.`follow_user_id`=?", o.UserID),
	)

	return UserRelations(queryMods...)
}

// FollowerUserUserRelations retrieves all the user_relation's UserRelations with an executor via follower_user_id column.
func (o *UserBase) FollowerUserUserRelations(mods ...qm.QueryMod) userRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_relations`.`follower_user_id`=?", o.UserID),
	)

	return UserRelations(queryMods...)
}

// LoadUserAuthCredential allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadUserAuthCredential(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_auth_credentials`),
		qm.WhereIn(`user_auth_credentials.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAuthCredentialBase")
	}

	var resultSlice []*UserAuthCredentialBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAuthCredentialBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_auth_credentials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_auth_credentials")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserAuthCredential = foreign
		if foreign.R == nil {
			foreign.R = &userAuthCredentialR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.UserAuthCredential = foreign
				if foreign.R == nil {
					foreign.R = &userAuthCredentialR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadFavorites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFavorites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`favorites`),
		qm.WhereIn(`favorites.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load favorites")
	}

	var resultSlice []*FavoriteBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice favorites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on favorites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorites")
	}

	if singular {
		object.R.Favorites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &favoriteR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.Favorites = append(local.R.Favorites, foreign)
				if foreign.R == nil {
					foreign.R = &favoriteR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadPlats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadPlats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plats`),
		qm.WhereIn(`plats.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plats")
	}

	var resultSlice []*PlatBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plats")
	}

	if singular {
		object.R.Plats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &platR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.Plats = append(local.R.Plats, foreign)
				if foreign.R == nil {
					foreign.R = &platR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadTimelines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadTimelines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`timelines`),
		qm.WhereIn(`timelines.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load timelines")
	}

	var resultSlice []*TimelineBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice timelines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on timelines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for timelines")
	}

	if singular {
		object.R.Timelines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &timelineR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.Timelines = append(local.R.Timelines, foreign)
				if foreign.R == nil {
					foreign.R = &timelineR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadFollowUserUserRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFollowUserUserRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_relations`),
		qm.WhereIn(`user_relations.follow_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_relations")
	}

	var resultSlice []*UserRelationBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_relations")
	}

	if singular {
		object.R.FollowUserUserRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userRelationR{}
			}
			foreign.R.FollowUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserID, foreign.FollowUserID) {
				local.R.FollowUserUserRelations = append(local.R.FollowUserUserRelations, foreign)
				if foreign.R == nil {
					foreign.R = &userRelationR{}
				}
				foreign.R.FollowUser = local
				break
			}
		}
	}

	return nil
}

// LoadFollowerUserUserRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFollowerUserUserRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBase interface{}, mods queries.Applicator) error {
	var slice []*UserBase
	var object *UserBase

	if singular {
		var ok bool
		object, ok = maybeUserBase.(*UserBase)
		if !ok {
			object = new(UserBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBase))
			}
		}
	} else {
		s, ok := maybeUserBase.(*[]*UserBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.UserID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.UserID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_relations`),
		qm.WhereIn(`user_relations.follower_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_relations")
	}

	var resultSlice []*UserRelationBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_relations")
	}

	if singular {
		object.R.FollowerUserUserRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userRelationR{}
			}
			foreign.R.FollowerUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UserID, foreign.FollowerUserID) {
				local.R.FollowerUserUserRelations = append(local.R.FollowerUserUserRelations, foreign)
				if foreign.R == nil {
					foreign.R = &userRelationR{}
				}
				foreign.R.FollowerUser = local
				break
			}
		}
	}

	return nil
}

// SetUserAuthCredential of the user to the related item.
// Sets o.R.UserAuthCredential to related.
// Adds o to related.R.User.
func (o *UserBase) SetUserAuthCredential(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAuthCredentialBase) error {
	var err error

	if insert {
		queries.Assign(&related.UserID, o.UserID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `user_auth_credentials` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
			strmangle.WhereClause("`", "`", 0, userAuthCredentialPrimaryKeyColumns),
		)
		values := []interface{}{o.UserID, related.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.UserID, o.UserID)
	}

	if o.R == nil {
		o.R = &userR{
			UserAuthCredential: related,
		}
	} else {
		o.R.UserAuthCredential = related
	}

	if related.R == nil {
		related.R = &userAuthCredentialR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddFavorites adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Favorites.
// Sets related.R.User appropriately.
func (o *UserBase) AddFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FavoriteBase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.UserID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `favorites` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.PlatID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.UserID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			Favorites: related,
		}
	} else {
		o.R.Favorites = append(o.R.Favorites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &favoriteR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddPlats adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Plats.
// Sets related.R.User appropriately.
func (o *UserBase) AddPlats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlatBase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.UserID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plats` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, platPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.PlatID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.UserID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			Plats: related,
		}
	} else {
		o.R.Plats = append(o.R.Plats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &platR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddTimelines adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Timelines.
// Sets related.R.User appropriately.
func (o *UserBase) AddTimelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TimelineBase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserID, o.UserID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `timelines` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, timelinePrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.TimelineID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserID, o.UserID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			Timelines: related,
		}
	} else {
		o.R.Timelines = append(o.R.Timelines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &timelineR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddFollowUserUserRelations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FollowUserUserRelations.
// Sets related.R.FollowUser appropriately.
func (o *UserBase) AddFollowUserUserRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserRelationBase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FollowUserID, o.UserID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_relations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"follow_user_id"}),
				strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.FollowUserID, rel.FollowerUserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FollowUserID, o.UserID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			FollowUserUserRelations: related,
		}
	} else {
		o.R.FollowUserUserRelations = append(o.R.FollowUserUserRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userRelationR{
				FollowUser: o,
			}
		} else {
			rel.R.FollowUser = o
		}
	}
	return nil
}

// AddFollowerUserUserRelations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FollowerUserUserRelations.
// Sets related.R.FollowerUser appropriately.
func (o *UserBase) AddFollowerUserUserRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserRelationBase) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FollowerUserID, o.UserID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_relations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"follower_user_id"}),
				strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.FollowUserID, rel.FollowerUserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FollowerUserID, o.UserID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			FollowerUserUserRelations: related,
		}
	} else {
		o.R.FollowerUserUserRelations = append(o.R.FollowerUserUserRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userRelationR{
				FollowerUser: o,
			}
		} else {
			rel.R.FollowerUser = o
		}
	}
	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("`users`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`users`.*"})
	}

	return userQuery{q}
}

// FindUserBase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBase(ctx context.Context, exec boil.ContextExecutor, userID types.UserID, selectCols ...string) (*UserBase, error) {
	userObj := &UserBase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `users` where `user_id`=?", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from users")
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into users")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for users")
	}

CacheNoHooks:
	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserBase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update users row")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for users")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in user slice")
	}

	return nil
}

// Delete deletes a single UserBase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBase) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no UserBase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM `users` WHERE `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from users")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from users")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from user slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBase(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `users`.* FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in UserBaseSlice")
	}

	*o = slice

	return nil
}

// UserBaseExists checks if the UserBase row exists.
func UserBaseExists(ctx context.Context, exec boil.ContextExecutor, userID types.UserID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `users` where `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if users exists")
	}

	return exists, nil
}

// Exists checks if the UserBase row exists.
func (o *UserBase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBaseExists(ctx, exec, o.UserID)
}
