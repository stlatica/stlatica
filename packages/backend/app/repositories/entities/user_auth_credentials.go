// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAuthCredentialBase is an object representing the database table.
type UserAuthCredentialBase struct { // UserID
	UserID types.UserID `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// Encrypted password
	EncryptedPassword string `boil:"encrypted_password" json:"encrypted_password" toml:"encrypted_password" yaml:"encrypted_password"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Unix time
	UpdatedAt types.UnixTime `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userAuthCredentialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAuthCredentialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAuthCredentialBaseColumns = struct {
	UserID            string
	EncryptedPassword string
	CreatedAt         string
	UpdatedAt         string
}{
	UserID:            "user_id",
	EncryptedPassword: "encrypted_password",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var UserAuthCredentialBaseTableColumns = struct {
	UserID            string
	EncryptedPassword string
	CreatedAt         string
	UpdatedAt         string
}{
	UserID:            "user_auth_credentials.user_id",
	EncryptedPassword: "user_auth_credentials.encrypted_password",
	CreatedAt:         "user_auth_credentials.created_at",
	UpdatedAt:         "user_auth_credentials.updated_at",
}

// Generated where

var UserAuthCredentialBaseWhere = struct {
	UserID            whereHelpertypes_UserID
	EncryptedPassword whereHelperstring
	CreatedAt         whereHelpertypes_UnixTime
	UpdatedAt         whereHelpertypes_UnixTime
}{
	UserID:            whereHelpertypes_UserID{field: "`user_auth_credentials`.`user_id`"},
	EncryptedPassword: whereHelperstring{field: "`user_auth_credentials`.`encrypted_password`"},
	CreatedAt:         whereHelpertypes_UnixTime{field: "`user_auth_credentials`.`created_at`"},
	UpdatedAt:         whereHelpertypes_UnixTime{field: "`user_auth_credentials`.`updated_at`"},
}

// UserAuthCredentialBaseRels is where relationship names are stored.
var UserAuthCredentialBaseRels = struct {
	User string
}{
	User: "User",
}

// userAuthCredentialR is where relationships are stored.
type userAuthCredentialR struct {
	User *UserBase `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAuthCredentialR) NewStruct() *userAuthCredentialR {
	return &userAuthCredentialR{}
}

func (r *userAuthCredentialR) GetUser() *UserBase {
	if r == nil {
		return nil
	}
	return r.User
}

// userAuthCredentialL is where Load methods for each relationship are stored.
type userAuthCredentialL struct{}

var (
	userAuthCredentialAllColumns            = []string{"user_id", "encrypted_password", "created_at", "updated_at"}
	userAuthCredentialColumnsWithoutDefault = []string{"user_id", "encrypted_password", "created_at", "updated_at"}
	userAuthCredentialColumnsWithDefault    = []string{}
	userAuthCredentialPrimaryKeyColumns     = []string{"user_id"}
	userAuthCredentialGeneratedColumns      = []string{}
)

type (
	// UserAuthCredentialBaseSlice is an alias for a slice of pointers to UserAuthCredentialBase.
	// This should almost always be used instead of []UserAuthCredentialBase.
	UserAuthCredentialBaseSlice []*UserAuthCredentialBase

	userAuthCredentialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAuthCredentialType                 = reflect.TypeOf(&UserAuthCredentialBase{})
	userAuthCredentialMapping              = queries.MakeStructMapping(userAuthCredentialType)
	userAuthCredentialPrimaryKeyMapping, _ = queries.BindMapping(userAuthCredentialType, userAuthCredentialMapping, userAuthCredentialPrimaryKeyColumns)
	userAuthCredentialInsertCacheMut       sync.RWMutex
	userAuthCredentialInsertCache          = make(map[string]insertCache)
	userAuthCredentialUpdateCacheMut       sync.RWMutex
	userAuthCredentialUpdateCache          = make(map[string]updateCache)
	userAuthCredentialUpsertCacheMut       sync.RWMutex
	userAuthCredentialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userAuthCredential record from the query.
func (q userAuthCredentialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAuthCredentialBase, error) {
	o := &UserAuthCredentialBase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for user_auth_credentials")
	}

	return o, nil
}

// All returns all UserAuthCredentialBase records from the query.
func (q userAuthCredentialQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAuthCredentialBaseSlice, error) {
	var o []*UserAuthCredentialBase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to UserAuthCredentialBase slice")
	}

	return o, nil
}

// Count returns the count of all UserAuthCredentialBase records in the query.
func (q userAuthCredentialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count user_auth_credentials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAuthCredentialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if user_auth_credentials exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserAuthCredentialBase) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAuthCredentialL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAuthCredentialBase interface{}, mods queries.Applicator) error {
	var slice []*UserAuthCredentialBase
	var object *UserAuthCredentialBase

	if singular {
		var ok bool
		object, ok = maybeUserAuthCredentialBase.(*UserAuthCredentialBase)
		if !ok {
			object = new(UserAuthCredentialBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAuthCredentialBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAuthCredentialBase))
			}
		}
	} else {
		s, ok := maybeUserAuthCredentialBase.(*[]*UserAuthCredentialBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAuthCredentialBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAuthCredentialBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAuthCredentialR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAuthCredentialR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBase")
	}

	var resultSlice []*UserBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAuthCredential = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAuthCredential = local
				break
			}
		}
	}

	return nil
}

// SetUser of the userAuthCredential to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthCredential.
func (o *UserAuthCredentialBase) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_auth_credentials` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userAuthCredentialPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.UserID)
	if o.R == nil {
		o.R = &userAuthCredentialR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAuthCredential: o,
		}
	} else {
		related.R.UserAuthCredential = o
	}

	return nil
}

// UserAuthCredentials retrieves all the records using an executor.
func UserAuthCredentials(mods ...qm.QueryMod) userAuthCredentialQuery {
	mods = append(mods, qm.From("`user_auth_credentials`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_auth_credentials`.*"})
	}

	return userAuthCredentialQuery{q}
}

// FindUserAuthCredentialBase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAuthCredentialBase(ctx context.Context, exec boil.ContextExecutor, userID types.UserID, selectCols ...string) (*UserAuthCredentialBase, error) {
	userAuthCredentialObj := &UserAuthCredentialBase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_auth_credentials` where `user_id`=?", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userAuthCredentialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from user_auth_credentials")
	}

	return userAuthCredentialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAuthCredentialBase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no user_auth_credentials provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthCredentialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAuthCredentialInsertCacheMut.RLock()
	cache, cached := userAuthCredentialInsertCache[key]
	userAuthCredentialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAuthCredentialAllColumns,
			userAuthCredentialColumnsWithDefault,
			userAuthCredentialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAuthCredentialType, userAuthCredentialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAuthCredentialType, userAuthCredentialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_auth_credentials` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_auth_credentials` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_auth_credentials` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userAuthCredentialPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into user_auth_credentials")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for user_auth_credentials")
	}

CacheNoHooks:
	if !cached {
		userAuthCredentialInsertCacheMut.Lock()
		userAuthCredentialInsertCache[key] = cache
		userAuthCredentialInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserAuthCredentialBase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAuthCredentialBase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userAuthCredentialUpdateCacheMut.RLock()
	cache, cached := userAuthCredentialUpdateCache[key]
	userAuthCredentialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAuthCredentialAllColumns,
			userAuthCredentialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update user_auth_credentials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_auth_credentials` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userAuthCredentialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAuthCredentialType, userAuthCredentialMapping, append(wl, userAuthCredentialPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update user_auth_credentials row")
	}

	if !cached {
		userAuthCredentialUpdateCacheMut.Lock()
		userAuthCredentialUpdateCache[key] = cache
		userAuthCredentialUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q userAuthCredentialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for user_auth_credentials")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAuthCredentialBaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_auth_credentials` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthCredentialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in userAuthCredential slice")
	}

	return nil
}

// Delete deletes a single UserAuthCredentialBase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAuthCredentialBase) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no UserAuthCredentialBase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAuthCredentialPrimaryKeyMapping)
	sql := "DELETE FROM `user_auth_credentials` WHERE `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from user_auth_credentials")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userAuthCredentialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no userAuthCredentialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from user_auth_credentials")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAuthCredentialBaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_auth_credentials` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthCredentialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from userAuthCredential slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAuthCredentialBase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAuthCredentialBase(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAuthCredentialBaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAuthCredentialBaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_auth_credentials`.* FROM `user_auth_credentials` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthCredentialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in UserAuthCredentialBaseSlice")
	}

	*o = slice

	return nil
}

// UserAuthCredentialBaseExists checks if the UserAuthCredentialBase row exists.
func UserAuthCredentialBaseExists(ctx context.Context, exec boil.ContextExecutor, userID types.UserID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_auth_credentials` where `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if user_auth_credentials exists")
	}

	return exists, nil
}

// Exists checks if the UserAuthCredentialBase row exists.
func (o *UserAuthCredentialBase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAuthCredentialBaseExists(ctx, exec, o.UserID)
}
