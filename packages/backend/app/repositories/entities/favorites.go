// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FavoriteBase is an object representing the database table.
type FavoriteBase struct { // ulid
	PlatID types.PlatID `boil:"plat_id" json:"plat_id" toml:"plat_id" yaml:"plat_id"`
	// user_id
	UserID types.UserID `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *favoriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L favoriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FavoriteBaseColumns = struct {
	PlatID    string
	UserID    string
	CreatedAt string
}{
	PlatID:    "plat_id",
	UserID:    "user_id",
	CreatedAt: "created_at",
}

var FavoriteBaseTableColumns = struct {
	PlatID    string
	UserID    string
	CreatedAt string
}{
	PlatID:    "favorites.plat_id",
	UserID:    "favorites.user_id",
	CreatedAt: "favorites.created_at",
}

// Generated where

type whereHelpertypes_PlatID struct{ field string }

func (w whereHelpertypes_PlatID) EQ(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_PlatID) NEQ(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_PlatID) LT(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_PlatID) LTE(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_PlatID) GT(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_PlatID) GTE(x types.PlatID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_UserID struct{ field string }

func (w whereHelpertypes_UserID) EQ(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_UserID) NEQ(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_UserID) LT(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_UserID) LTE(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_UserID) GT(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_UserID) GTE(x types.UserID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_UnixTime struct{ field string }

func (w whereHelpertypes_UnixTime) EQ(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_UnixTime) NEQ(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_UnixTime) LT(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_UnixTime) LTE(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_UnixTime) GT(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_UnixTime) GTE(x types.UnixTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FavoriteBaseWhere = struct {
	PlatID    whereHelpertypes_PlatID
	UserID    whereHelpertypes_UserID
	CreatedAt whereHelpertypes_UnixTime
}{
	PlatID:    whereHelpertypes_PlatID{field: "`favorites`.`plat_id`"},
	UserID:    whereHelpertypes_UserID{field: "`favorites`.`user_id`"},
	CreatedAt: whereHelpertypes_UnixTime{field: "`favorites`.`created_at`"},
}

// FavoriteBaseRels is where relationship names are stored.
var FavoriteBaseRels = struct {
	Plat string
	User string
}{
	Plat: "Plat",
	User: "User",
}

// favoriteR is where relationships are stored.
type favoriteR struct {
	Plat *PlatBase `boil:"Plat" json:"Plat" toml:"Plat" yaml:"Plat"`
	User *UserBase `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*favoriteR) NewStruct() *favoriteR {
	return &favoriteR{}
}

func (r *favoriteR) GetPlat() *PlatBase {
	if r == nil {
		return nil
	}
	return r.Plat
}

func (r *favoriteR) GetUser() *UserBase {
	if r == nil {
		return nil
	}
	return r.User
}

// favoriteL is where Load methods for each relationship are stored.
type favoriteL struct{}

var (
	favoriteAllColumns            = []string{"plat_id", "user_id", "created_at"}
	favoriteColumnsWithoutDefault = []string{"plat_id", "user_id", "created_at"}
	favoriteColumnsWithDefault    = []string{}
	favoritePrimaryKeyColumns     = []string{"plat_id", "user_id"}
	favoriteGeneratedColumns      = []string{}
)

type (
	// FavoriteBaseSlice is an alias for a slice of pointers to FavoriteBase.
	// This should almost always be used instead of []FavoriteBase.
	FavoriteBaseSlice []*FavoriteBase

	favoriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	favoriteType                 = reflect.TypeOf(&FavoriteBase{})
	favoriteMapping              = queries.MakeStructMapping(favoriteType)
	favoritePrimaryKeyMapping, _ = queries.BindMapping(favoriteType, favoriteMapping, favoritePrimaryKeyColumns)
	favoriteInsertCacheMut       sync.RWMutex
	favoriteInsertCache          = make(map[string]insertCache)
	favoriteUpdateCacheMut       sync.RWMutex
	favoriteUpdateCache          = make(map[string]updateCache)
	favoriteUpsertCacheMut       sync.RWMutex
	favoriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single favorite record from the query.
func (q favoriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FavoriteBase, error) {
	o := &FavoriteBase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for favorites")
	}

	return o, nil
}

// All returns all FavoriteBase records from the query.
func (q favoriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (FavoriteBaseSlice, error) {
	var o []*FavoriteBase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to FavoriteBase slice")
	}

	return o, nil
}

// Count returns the count of all FavoriteBase records in the query.
func (q favoriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count favorites rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q favoriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if favorites exists")
	}

	return count > 0, nil
}

// Plat pointed to by the foreign key.
func (o *FavoriteBase) Plat(mods ...qm.QueryMod) platQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`plat_id` = ?", o.PlatID),
	}

	queryMods = append(queryMods, mods...)

	return Plats(queryMods...)
}

// User pointed to by the foreign key.
func (o *FavoriteBase) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadPlat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteL) LoadPlat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteBase interface{}, mods queries.Applicator) error {
	var slice []*FavoriteBase
	var object *FavoriteBase

	if singular {
		var ok bool
		object, ok = maybeFavoriteBase.(*FavoriteBase)
		if !ok {
			object = new(FavoriteBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteBase))
			}
		}
	} else {
		s, ok := maybeFavoriteBase.(*[]*FavoriteBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteR{}
		}
		if !queries.IsNil(object.PlatID) {
			args[object.PlatID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteR{}
			}

			if !queries.IsNil(obj.PlatID) {
				args[obj.PlatID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plats`),
		qm.WhereIn(`plats.plat_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlatBase")
	}

	var resultSlice []*PlatBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlatBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plats")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Plat = foreign
		if foreign.R == nil {
			foreign.R = &platR{}
		}
		foreign.R.Favorites = append(foreign.R.Favorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlatID, foreign.PlatID) {
				local.R.Plat = foreign
				if foreign.R == nil {
					foreign.R = &platR{}
				}
				foreign.R.Favorites = append(foreign.R.Favorites, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteBase interface{}, mods queries.Applicator) error {
	var slice []*FavoriteBase
	var object *FavoriteBase

	if singular {
		var ok bool
		object, ok = maybeFavoriteBase.(*FavoriteBase)
		if !ok {
			object = new(FavoriteBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFavoriteBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFavoriteBase))
			}
		}
	} else {
		s, ok := maybeFavoriteBase.(*[]*FavoriteBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFavoriteBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFavoriteBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &favoriteR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBase")
	}

	var resultSlice []*UserBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Favorites = append(foreign.R.Favorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Favorites = append(foreign.R.Favorites, local)
				break
			}
		}
	}

	return nil
}

// SetPlat of the favorite to the related item.
// Sets o.R.Plat to related.
// Adds o to related.R.Favorites.
func (o *FavoriteBase) SetPlat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PlatBase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `favorites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"plat_id"}),
		strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns),
	)
	values := []interface{}{related.PlatID, o.PlatID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlatID, related.PlatID)
	if o.R == nil {
		o.R = &favoriteR{
			Plat: related,
		}
	} else {
		o.R.Plat = related
	}

	if related.R == nil {
		related.R = &platR{
			Favorites: FavoriteBaseSlice{o},
		}
	} else {
		related.R.Favorites = append(related.R.Favorites, o)
	}

	return nil
}

// SetUser of the favorite to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Favorites.
func (o *FavoriteBase) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `favorites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.PlatID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.UserID)
	if o.R == nil {
		o.R = &favoriteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Favorites: FavoriteBaseSlice{o},
		}
	} else {
		related.R.Favorites = append(related.R.Favorites, o)
	}

	return nil
}

// Favorites retrieves all the records using an executor.
func Favorites(mods ...qm.QueryMod) favoriteQuery {
	mods = append(mods, qm.From("`favorites`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`favorites`.*"})
	}

	return favoriteQuery{q}
}

// FindFavoriteBase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFavoriteBase(ctx context.Context, exec boil.ContextExecutor, platID types.PlatID, userID types.UserID, selectCols ...string) (*FavoriteBase, error) {
	favoriteObj := &FavoriteBase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `favorites` where `plat_id`=? AND `user_id`=?", sel,
	)

	q := queries.Raw(query, platID, userID)

	err := q.Bind(ctx, exec, favoriteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from favorites")
	}

	return favoriteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FavoriteBase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no favorites provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	favoriteInsertCacheMut.RLock()
	cache, cached := favoriteInsertCache[key]
	favoriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			favoriteAllColumns,
			favoriteColumnsWithDefault,
			favoriteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(favoriteType, favoriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(favoriteType, favoriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `favorites` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `favorites` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `favorites` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into favorites")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlatID,
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for favorites")
	}

CacheNoHooks:
	if !cached {
		favoriteInsertCacheMut.Lock()
		favoriteInsertCache[key] = cache
		favoriteInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the FavoriteBase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FavoriteBase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	favoriteUpdateCacheMut.RLock()
	cache, cached := favoriteUpdateCache[key]
	favoriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			favoriteAllColumns,
			favoritePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update favorites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `favorites` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(favoriteType, favoriteMapping, append(wl, favoritePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update favorites row")
	}

	if !cached {
		favoriteUpdateCacheMut.Lock()
		favoriteUpdateCache[key] = cache
		favoriteUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q favoriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for favorites")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FavoriteBaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `favorites` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, favoritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in favorite slice")
	}

	return nil
}

// Delete deletes a single FavoriteBase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FavoriteBase) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no FavoriteBase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), favoritePrimaryKeyMapping)
	sql := "DELETE FROM `favorites` WHERE `plat_id`=? AND `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from favorites")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q favoriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no favoriteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from favorites")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FavoriteBaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `favorites` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, favoritePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from favorite slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FavoriteBase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFavoriteBase(ctx, exec, o.PlatID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FavoriteBaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FavoriteBaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `favorites`.* FROM `favorites` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, favoritePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in FavoriteBaseSlice")
	}

	*o = slice

	return nil
}

// FavoriteBaseExists checks if the FavoriteBase row exists.
func FavoriteBaseExists(ctx context.Context, exec boil.ContextExecutor, platID types.PlatID, userID types.UserID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `favorites` where `plat_id`=? AND `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, platID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, platID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if favorites exists")
	}

	return exists, nil
}

// Exists checks if the FavoriteBase row exists.
func (o *FavoriteBase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FavoriteBaseExists(ctx, exec, o.PlatID, o.UserID)
}
