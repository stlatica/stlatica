// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserRelationBase is an object representing the database table.
type UserRelationBase struct { // user_id of the followed side
	FollowUserID types.UserID `boil:"follow_user_id" json:"follow_user_id" toml:"follow_user_id" yaml:"follow_user_id"`
	// user_id of the follower side
	FollowerUserID types.UserID `boil:"follower_user_id" json:"follower_user_id" toml:"follower_user_id" yaml:"follower_user_id"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Unix time
	UpdatedAt types.UnixTime `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userRelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userRelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserRelationBaseColumns = struct {
	FollowUserID   string
	FollowerUserID string
	CreatedAt      string
	UpdatedAt      string
}{
	FollowUserID:   "follow_user_id",
	FollowerUserID: "follower_user_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var UserRelationBaseTableColumns = struct {
	FollowUserID   string
	FollowerUserID string
	CreatedAt      string
	UpdatedAt      string
}{
	FollowUserID:   "user_relations.follow_user_id",
	FollowerUserID: "user_relations.follower_user_id",
	CreatedAt:      "user_relations.created_at",
	UpdatedAt:      "user_relations.updated_at",
}

// Generated where

var UserRelationBaseWhere = struct {
	FollowUserID   whereHelpertypes_UserID
	FollowerUserID whereHelpertypes_UserID
	CreatedAt      whereHelpertypes_UnixTime
	UpdatedAt      whereHelpertypes_UnixTime
}{
	FollowUserID:   whereHelpertypes_UserID{field: "`user_relations`.`follow_user_id`"},
	FollowerUserID: whereHelpertypes_UserID{field: "`user_relations`.`follower_user_id`"},
	CreatedAt:      whereHelpertypes_UnixTime{field: "`user_relations`.`created_at`"},
	UpdatedAt:      whereHelpertypes_UnixTime{field: "`user_relations`.`updated_at`"},
}

// UserRelationBaseRels is where relationship names are stored.
var UserRelationBaseRels = struct {
	FollowUser   string
	FollowerUser string
}{
	FollowUser:   "FollowUser",
	FollowerUser: "FollowerUser",
}

// userRelationR is where relationships are stored.
type userRelationR struct {
	FollowUser   *UserBase `boil:"FollowUser" json:"FollowUser" toml:"FollowUser" yaml:"FollowUser"`
	FollowerUser *UserBase `boil:"FollowerUser" json:"FollowerUser" toml:"FollowerUser" yaml:"FollowerUser"`
}

// NewStruct creates a new relationship struct
func (*userRelationR) NewStruct() *userRelationR {
	return &userRelationR{}
}

func (r *userRelationR) GetFollowUser() *UserBase {
	if r == nil {
		return nil
	}
	return r.FollowUser
}

func (r *userRelationR) GetFollowerUser() *UserBase {
	if r == nil {
		return nil
	}
	return r.FollowerUser
}

// userRelationL is where Load methods for each relationship are stored.
type userRelationL struct{}

var (
	userRelationAllColumns            = []string{"follow_user_id", "follower_user_id", "created_at", "updated_at"}
	userRelationColumnsWithoutDefault = []string{"follow_user_id", "follower_user_id", "created_at", "updated_at"}
	userRelationColumnsWithDefault    = []string{}
	userRelationPrimaryKeyColumns     = []string{"follow_user_id", "follower_user_id"}
	userRelationGeneratedColumns      = []string{}
)

type (
	// UserRelationBaseSlice is an alias for a slice of pointers to UserRelationBase.
	// This should almost always be used instead of []UserRelationBase.
	UserRelationBaseSlice []*UserRelationBase

	userRelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userRelationType                 = reflect.TypeOf(&UserRelationBase{})
	userRelationMapping              = queries.MakeStructMapping(userRelationType)
	userRelationPrimaryKeyMapping, _ = queries.BindMapping(userRelationType, userRelationMapping, userRelationPrimaryKeyColumns)
	userRelationInsertCacheMut       sync.RWMutex
	userRelationInsertCache          = make(map[string]insertCache)
	userRelationUpdateCacheMut       sync.RWMutex
	userRelationUpdateCache          = make(map[string]updateCache)
	userRelationUpsertCacheMut       sync.RWMutex
	userRelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userRelation record from the query.
func (q userRelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserRelationBase, error) {
	o := &UserRelationBase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for user_relations")
	}

	return o, nil
}

// All returns all UserRelationBase records from the query.
func (q userRelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserRelationBaseSlice, error) {
	var o []*UserRelationBase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to UserRelationBase slice")
	}

	return o, nil
}

// Count returns the count of all UserRelationBase records in the query.
func (q userRelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count user_relations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userRelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if user_relations exists")
	}

	return count > 0, nil
}

// FollowUser pointed to by the foreign key.
func (o *UserRelationBase) FollowUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.FollowUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// FollowerUser pointed to by the foreign key.
func (o *UserRelationBase) FollowerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.FollowerUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadFollowUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userRelationL) LoadFollowUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserRelationBase interface{}, mods queries.Applicator) error {
	var slice []*UserRelationBase
	var object *UserRelationBase

	if singular {
		var ok bool
		object, ok = maybeUserRelationBase.(*UserRelationBase)
		if !ok {
			object = new(UserRelationBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserRelationBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserRelationBase))
			}
		}
	} else {
		s, ok := maybeUserRelationBase.(*[]*UserRelationBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserRelationBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserRelationBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userRelationR{}
		}
		if !queries.IsNil(object.FollowUserID) {
			args[object.FollowUserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userRelationR{}
			}

			if !queries.IsNil(obj.FollowUserID) {
				args[obj.FollowUserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBase")
	}

	var resultSlice []*UserBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowUserUserRelations = append(foreign.R.FollowUserUserRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FollowUserID, foreign.UserID) {
				local.R.FollowUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowUserUserRelations = append(foreign.R.FollowUserUserRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadFollowerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userRelationL) LoadFollowerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserRelationBase interface{}, mods queries.Applicator) error {
	var slice []*UserRelationBase
	var object *UserRelationBase

	if singular {
		var ok bool
		object, ok = maybeUserRelationBase.(*UserRelationBase)
		if !ok {
			object = new(UserRelationBase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserRelationBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserRelationBase))
			}
		}
	} else {
		s, ok := maybeUserRelationBase.(*[]*UserRelationBase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserRelationBase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserRelationBase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userRelationR{}
		}
		if !queries.IsNil(object.FollowerUserID) {
			args[object.FollowerUserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userRelationR{}
			}

			if !queries.IsNil(obj.FollowerUserID) {
				args[obj.FollowerUserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBase")
	}

	var resultSlice []*UserBase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowerUserUserRelations = append(foreign.R.FollowerUserUserRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FollowerUserID, foreign.UserID) {
				local.R.FollowerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowerUserUserRelations = append(foreign.R.FollowerUserUserRelations, local)
				break
			}
		}
	}

	return nil
}

// SetFollowUser of the userRelation to the related item.
// Sets o.R.FollowUser to related.
// Adds o to related.R.FollowUserUserRelations.
func (o *UserRelationBase) SetFollowUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"follow_user_id"}),
		strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.FollowUserID, o.FollowerUserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FollowUserID, related.UserID)
	if o.R == nil {
		o.R = &userRelationR{
			FollowUser: related,
		}
	} else {
		o.R.FollowUser = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowUserUserRelations: UserRelationBaseSlice{o},
		}
	} else {
		related.R.FollowUserUserRelations = append(related.R.FollowUserUserRelations, o)
	}

	return nil
}

// SetFollowerUser of the userRelation to the related item.
// Sets o.R.FollowerUser to related.
// Adds o to related.R.FollowerUserUserRelations.
func (o *UserRelationBase) SetFollowerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBase) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"follower_user_id"}),
		strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.FollowUserID, o.FollowerUserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FollowerUserID, related.UserID)
	if o.R == nil {
		o.R = &userRelationR{
			FollowerUser: related,
		}
	} else {
		o.R.FollowerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowerUserUserRelations: UserRelationBaseSlice{o},
		}
	} else {
		related.R.FollowerUserUserRelations = append(related.R.FollowerUserUserRelations, o)
	}

	return nil
}

// UserRelations retrieves all the records using an executor.
func UserRelations(mods ...qm.QueryMod) userRelationQuery {
	mods = append(mods, qm.From("`user_relations`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_relations`.*"})
	}

	return userRelationQuery{q}
}

// FindUserRelationBase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserRelationBase(ctx context.Context, exec boil.ContextExecutor, followUserID types.UserID, followerUserID types.UserID, selectCols ...string) (*UserRelationBase, error) {
	userRelationObj := &UserRelationBase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_relations` where `follow_user_id`=? AND `follower_user_id`=?", sel,
	)

	q := queries.Raw(query, followUserID, followerUserID)

	err := q.Bind(ctx, exec, userRelationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from user_relations")
	}

	return userRelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserRelationBase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no user_relations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userRelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userRelationInsertCacheMut.RLock()
	cache, cached := userRelationInsertCache[key]
	userRelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userRelationAllColumns,
			userRelationColumnsWithDefault,
			userRelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userRelationType, userRelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userRelationType, userRelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_relations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_relations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_relations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into user_relations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FollowUserID,
		o.FollowerUserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for user_relations")
	}

CacheNoHooks:
	if !cached {
		userRelationInsertCacheMut.Lock()
		userRelationInsertCache[key] = cache
		userRelationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserRelationBase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserRelationBase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userRelationUpdateCacheMut.RLock()
	cache, cached := userRelationUpdateCache[key]
	userRelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userRelationAllColumns,
			userRelationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update user_relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_relations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userRelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userRelationType, userRelationMapping, append(wl, userRelationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update user_relations row")
	}

	if !cached {
		userRelationUpdateCacheMut.Lock()
		userRelationUpdateCache[key] = cache
		userRelationUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q userRelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for user_relations")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserRelationBaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userRelationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in userRelation slice")
	}

	return nil
}

// Delete deletes a single UserRelationBase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserRelationBase) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no UserRelationBase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userRelationPrimaryKeyMapping)
	sql := "DELETE FROM `user_relations` WHERE `follow_user_id`=? AND `follower_user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from user_relations")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userRelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no userRelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from user_relations")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserRelationBaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_relations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userRelationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from userRelation slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserRelationBase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserRelationBase(ctx, exec, o.FollowUserID, o.FollowerUserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserRelationBaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserRelationBaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_relations`.* FROM `user_relations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userRelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in UserRelationBaseSlice")
	}

	*o = slice

	return nil
}

// UserRelationBaseExists checks if the UserRelationBase row exists.
func UserRelationBaseExists(ctx context.Context, exec boil.ContextExecutor, followUserID types.UserID, followerUserID types.UserID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_relations` where `follow_user_id`=? AND `follower_user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, followUserID, followerUserID)
	}
	row := exec.QueryRowContext(ctx, sql, followUserID, followerUserID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if user_relations exists")
	}

	return exists, nil
}

// Exists checks if the UserRelationBase row exists.
func (o *UserRelationBase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserRelationBaseExists(ctx, exec, o.FollowUserID, o.FollowerUserID)
}
