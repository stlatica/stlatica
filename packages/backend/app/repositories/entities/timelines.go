// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/stlatica/stlatica/packages/backend/app/domains/types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Timeline is an object representing the database table.
type Timeline struct { // ulid
	TimelineID types.TimelineID `boil:"timeline_id" json:"timeline_id" toml:"timeline_id" yaml:"timeline_id"`
	// user_id
	UserID types.UserID `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// name
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// description
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`
	// Unix time
	CreatedAt types.UnixTime `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Unix time
	UpdatedAt types.UnixTime `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *timelineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L timelineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TimelineColumns = struct {
	TimelineID  string
	UserID      string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	TimelineID:  "timeline_id",
	UserID:      "user_id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var TimelineTableColumns = struct {
	TimelineID  string
	UserID      string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	TimelineID:  "timelines.timeline_id",
	UserID:      "timelines.user_id",
	Name:        "timelines.name",
	Description: "timelines.description",
	CreatedAt:   "timelines.created_at",
	UpdatedAt:   "timelines.updated_at",
}

// Generated where

type whereHelpertypes_TimelineID struct{ field string }

func (w whereHelpertypes_TimelineID) EQ(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_TimelineID) NEQ(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_TimelineID) LT(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_TimelineID) LTE(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_TimelineID) GT(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_TimelineID) GTE(x types.TimelineID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TimelineWhere = struct {
	TimelineID  whereHelpertypes_TimelineID
	UserID      whereHelpertypes_UserID
	Name        whereHelperstring
	Description whereHelperstring
	CreatedAt   whereHelpertypes_UnixTime
	UpdatedAt   whereHelpertypes_UnixTime
}{
	TimelineID:  whereHelpertypes_TimelineID{field: "`timelines`.`timeline_id`"},
	UserID:      whereHelpertypes_UserID{field: "`timelines`.`user_id`"},
	Name:        whereHelperstring{field: "`timelines`.`name`"},
	Description: whereHelperstring{field: "`timelines`.`description`"},
	CreatedAt:   whereHelpertypes_UnixTime{field: "`timelines`.`created_at`"},
	UpdatedAt:   whereHelpertypes_UnixTime{field: "`timelines`.`updated_at`"},
}

// TimelineRels is where relationship names are stored.
var TimelineRels = struct {
	User string
}{
	User: "User",
}

// timelineR is where relationships are stored.
type timelineR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*timelineR) NewStruct() *timelineR {
	return &timelineR{}
}

func (r *timelineR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// timelineL is where Load methods for each relationship are stored.
type timelineL struct{}

var (
	timelineAllColumns            = []string{"timeline_id", "user_id", "name", "description", "created_at", "updated_at"}
	timelineColumnsWithoutDefault = []string{"timeline_id", "user_id", "name", "description", "created_at", "updated_at"}
	timelineColumnsWithDefault    = []string{}
	timelinePrimaryKeyColumns     = []string{"timeline_id"}
	timelineGeneratedColumns      = []string{}
)

type (
	// TimelineSlice is an alias for a slice of pointers to Timeline.
	// This should almost always be used instead of []Timeline.
	TimelineSlice []*Timeline

	timelineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	timelineType                 = reflect.TypeOf(&Timeline{})
	timelineMapping              = queries.MakeStructMapping(timelineType)
	timelinePrimaryKeyMapping, _ = queries.BindMapping(timelineType, timelineMapping, timelinePrimaryKeyColumns)
	timelineInsertCacheMut       sync.RWMutex
	timelineInsertCache          = make(map[string]insertCache)
	timelineUpdateCacheMut       sync.RWMutex
	timelineUpdateCache          = make(map[string]updateCache)
	timelineUpsertCacheMut       sync.RWMutex
	timelineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single timeline record from the query.
func (q timelineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Timeline, error) {
	o := &Timeline{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for timelines")
	}

	return o, nil
}

// All returns all Timeline records from the query.
func (q timelineQuery) All(ctx context.Context, exec boil.ContextExecutor) (TimelineSlice, error) {
	var o []*Timeline

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to Timeline slice")
	}

	return o, nil
}

// Count returns the count of all Timeline records in the query.
func (q timelineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count timelines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q timelineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if timelines exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Timeline) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (timelineL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTimeline interface{}, mods queries.Applicator) error {
	var slice []*Timeline
	var object *Timeline

	if singular {
		var ok bool
		object, ok = maybeTimeline.(*Timeline)
		if !ok {
			object = new(Timeline)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTimeline)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTimeline))
			}
		}
	} else {
		s, ok := maybeTimeline.(*[]*Timeline)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTimeline)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTimeline))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &timelineR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &timelineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Timelines = append(foreign.R.Timelines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.UserID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Timelines = append(foreign.R.Timelines, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the timeline to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Timelines.
func (o *Timeline) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `timelines` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, timelinePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.TimelineID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.UserID)
	if o.R == nil {
		o.R = &timelineR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Timelines: TimelineSlice{o},
		}
	} else {
		related.R.Timelines = append(related.R.Timelines, o)
	}

	return nil
}

// Timelines retrieves all the records using an executor.
func Timelines(mods ...qm.QueryMod) timelineQuery {
	mods = append(mods, qm.From("`timelines`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`timelines`.*"})
	}

	return timelineQuery{q}
}

// FindTimeline retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTimeline(ctx context.Context, exec boil.ContextExecutor, timelineID types.TimelineID, selectCols ...string) (*Timeline, error) {
	timelineObj := &Timeline{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `timelines` where `timeline_id`=?", sel,
	)

	q := queries.Raw(query, timelineID)

	err := q.Bind(ctx, exec, timelineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from timelines")
	}

	return timelineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Timeline) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no timelines provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(timelineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	timelineInsertCacheMut.RLock()
	cache, cached := timelineInsertCache[key]
	timelineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			timelineAllColumns,
			timelineColumnsWithDefault,
			timelineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(timelineType, timelineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(timelineType, timelineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `timelines` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `timelines` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `timelines` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, timelinePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into timelines")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TimelineID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for timelines")
	}

CacheNoHooks:
	if !cached {
		timelineInsertCacheMut.Lock()
		timelineInsertCache[key] = cache
		timelineInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Timeline.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Timeline) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	timelineUpdateCacheMut.RLock()
	cache, cached := timelineUpdateCache[key]
	timelineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			timelineAllColumns,
			timelinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("entities: unable to update timelines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `timelines` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, timelinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(timelineType, timelineMapping, append(wl, timelinePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update timelines row")
	}

	if !cached {
		timelineUpdateCacheMut.Lock()
		timelineUpdateCache[key] = cache
		timelineUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q timelineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all for timelines")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TimelineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `timelines` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, timelinePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to update all in timeline slice")
	}

	return nil
}

// Delete deletes a single Timeline record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Timeline) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("entities: no Timeline provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), timelinePrimaryKeyMapping)
	sql := "DELETE FROM `timelines` WHERE `timeline_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete from timelines")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q timelineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("entities: no timelineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from timelines")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TimelineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `timelines` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, timelinePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to delete all from timeline slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Timeline) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTimeline(ctx, exec, o.TimelineID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimelineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TimelineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `timelines`.* FROM `timelines` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, timelinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in TimelineSlice")
	}

	*o = slice

	return nil
}

// TimelineExists checks if the Timeline row exists.
func TimelineExists(ctx context.Context, exec boil.ContextExecutor, timelineID types.TimelineID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `timelines` where `timeline_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, timelineID)
	}
	row := exec.QueryRowContext(ctx, sql, timelineID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if timelines exists")
	}

	return exists, nil
}

// Exists checks if the Timeline row exists.
func (o *Timeline) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TimelineExists(ctx, exec, o.TimelineID)
}
