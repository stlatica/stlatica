// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CQAA//+y7e8IyB4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
