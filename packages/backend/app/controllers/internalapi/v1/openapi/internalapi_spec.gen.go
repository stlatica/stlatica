// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
