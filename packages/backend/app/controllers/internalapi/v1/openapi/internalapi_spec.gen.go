// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//X9YzTYlnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
