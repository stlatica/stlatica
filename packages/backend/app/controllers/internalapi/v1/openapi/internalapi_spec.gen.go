// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RLZjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
