// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
