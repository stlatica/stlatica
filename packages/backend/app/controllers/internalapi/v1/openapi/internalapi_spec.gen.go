// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWXW8bRRT9K9aAlBeTdZvy4jeXbCtLqQNO3Jc4Wk3WN85Wu7PLzGxIFFnK7AKq6iDS",
	"quHjASFKKKGhFlIkFCj/5sZJ+y/Q7Hptx95SkFCkvtlz5945c+aec3eH2L4X+AyYFKS8QwLKqQcSePIv",
	"FMAtp6V/tkDY3Amk4zNSTgIYPXr5/Jv+/Z9QfYtRF9X3GClUvbPT3fNPv0TVq84Xms0mo7b0dRVUvXXu",
	"Mwms1d9/iOohRkcYHWL8DKMnGP2B6mdUEUYPcFeNco76+3tnp7uoev3dQ4wene8pVIdNRooEtqgXuDCA",
	"o3EWiaPRBVRukCJh1Lsc5PBx6HBokbLkIRSJsDfAo/p2cjvQW4XkDmuTTqeTBRMaTM59XgcR+ExAwhL3",
	"A+DSgSRs+61kFVjokfIKuVmZt+rmRw1zaZkUyZ3q0lK1dtv6sFKv3DGXzTopktrisnVrsVGbJ0VSrS2b",
	"9VplwVoy63fNumXW64t6j/5b/cC0GrXK3Up1oXJzwSSr45d+XeLEXYrEAyFoO4U4zAZ9p0IWmsrqjLO1",
	"kl5xVGl1uN9fuwe21Kc0BPD8RiHFCcLWfdf1PwEuLNsPmZzOyjacH/w2/s7XS8NzHSahDVwfnG52WPuf",
	"qzms/a/KObZOmqyB8VOM/8Lod1S9pF0PMTrB+OTi8Yt+rJu9UV+41JIbUgaibBhbW1sGbEngjLrG5jXD",
	"8WgbhCGSfVbS57MBa+e9myOsIFxzHXsaTv+zX1991U2AHGP0FOMTjO9nAuqi6qL6BdXnqLqJBDMABRo4",
	"qHoeZSF13e1KEHB/E8St7D0m5aaOUD3DqHtZbql4BnDXfN8FyjReEXoe5dtvIC/+GuPnGB9g9KNejI8v",
	"0TbOSx4nY470Lod1UibvGCMHMwaiNXQzVuezhNQIJlFdPH7x6rsnZ6cPUB2//OHo4vBPVAcY7WkCM8D9",
	"/S/+A7wJ0YyMZwhiRNKg0YpTYphu6PFOeJ3yqvNvkUnnuK3D1v3pGwjpUunYtKD1mTWwLuDI9DkGcSuL",
	"W2l8E7hIK5Rmr82WNEl+AEwHy2RutjQ7pz2Jyo3EjowsW+tToxTGzgBsR8fbkGMqbZCFgblpa6N6udoi",
	"ZXIbZGNgemOzdCW/X0dbjIyezqruonTWJPCul0rplNGvkiChQeA6dnKkcU+kdjWaZW/SRUr4BNGhbYMQ",
	"mqgb/+NxlwdnzrlrtFXQkgEhU6NKppKeNuUme68wMzZKZ5KFqWk602Qp6htXh5r5srDuh6yVi3k43AfQ",
	"3r9KQodCEcA3gRdScHkwcz8fhpDnrg6yRurYUAgZ3aSOS9dcyAWc80GUwB2fPOOylLSthZd+mKx2Op3O",
	"3wEAAP//LKFxSO0KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
