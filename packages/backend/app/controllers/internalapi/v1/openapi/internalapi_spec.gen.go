// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
