// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"crp8sSmFmNAl8HPn5/4eAAD//yfPzSdtYwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
