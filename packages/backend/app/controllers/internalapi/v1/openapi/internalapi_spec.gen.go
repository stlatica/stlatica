// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
