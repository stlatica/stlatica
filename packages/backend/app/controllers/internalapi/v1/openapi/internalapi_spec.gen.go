// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wsZjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
