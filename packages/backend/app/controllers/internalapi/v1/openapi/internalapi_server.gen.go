// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post plat.
	// (POST /internal/v1/plats)
	PostPlat(ctx echo.Context) error
	// Delete plat by ID.
	// (DELETE /internal/v1/plats/{plat_id})
	DeletePlat(ctx echo.Context, platId PlatId) error
	// Get plat by ID.
	// (GET /internal/v1/plats/{plat_id})
	GetPlat(ctx echo.Context, platId PlatId) error
	// get timeline
	// (GET /internal/v1/timelines/{timeline_id})
	GetTimeline(ctx echo.Context, timelineId TimelineId) error
	// get user
	// (GET /internal/v1/users/{user_id})
	GetUser(ctx echo.Context, userId UserId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostPlat converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlat(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPlat(ctx)
	return err
}

// DeletePlat converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlat(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "plat_id" -------------
	var platId PlatId

	err = runtime.BindStyledParameterWithLocation("simple", false, "plat_id", runtime.ParamLocationPath, ctx.Param("plat_id"), &platId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plat_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePlat(ctx, platId)
	return err
}

// GetPlat converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlat(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "plat_id" -------------
	var platId PlatId

	err = runtime.BindStyledParameterWithLocation("simple", false, "plat_id", runtime.ParamLocationPath, ctx.Param("plat_id"), &platId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plat_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlat(ctx, platId)
	return err
}

// GetTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "timeline_id" -------------
	var timelineId TimelineId

	err = runtime.BindStyledParameterWithLocation("simple", false, "timeline_id", runtime.ParamLocationPath, ctx.Param("timeline_id"), &timelineId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeline_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeline(ctx, timelineId)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/v1/plats", wrapper.PostPlat)
	router.DELETE(baseURL+"/internal/v1/plats/:plat_id", wrapper.DeletePlat)
	router.GET(baseURL+"/internal/v1/plats/:plat_id", wrapper.GetPlat)
	router.GET(baseURL+"/internal/v1/timelines/:timeline_id", wrapper.GetTimeline)
	router.GET(baseURL+"/internal/v1/users/:user_id", wrapper.GetUser)

}
