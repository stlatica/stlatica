/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/internal/v1/users/{user_id}": {
    /**
     * get user
     * @description get user
     */
    get: operations["getUser"];
    /**
     * Delete User by ID.
     * @description Delete User
     */
    delete: operations["deleteUser"];
  };
  "/internal/v1/users": {
    /**
     * Get users.
     * @description Get users.
     */
    get: operations["getUsers"];
    /**
     * Create new user.
     * @description Create new user.
     */
    post: operations["createUser"];
  };
  "/internal/v1/users/{user_id}/follows": {
    /**
     * Get follow user list.
     * @description Get follow user list.
     */
    get: operations["getFollowUsers"];
  };
  "/internal/v1/users/{user_id}/followers": {
    /**
     * Get follower list.
     * @description Get follower list.
     */
    get: operations["getFollowers"];
  };
  "/internal/v1/users/{user_id}/follow": {
    /**
     * Add new follow user.
     * @description Add new follow user.
     */
    post: operations["postFollow"];
    /**
     * Delete follow user.
     * @description Delete follow user.
     */
    delete: operations["deleteFollow"];
  };
  "/internal/v1/plats/{plat_id}": {
    /**
     * Get plat by ID.
     * @description Returns plat.
     */
    get: operations["getPlat"];
    /**
     * Delete plat by ID.
     * @description Delete plat.
     */
    delete: operations["deletePlat"];
  };
  "/internal/v1/plats/{plat_id}/favorites": {
    /** Add "favorite" to a specific plat by ID. */
    post: operations["postFavorite"];
    /** Delete "favorite" to a specific plat by ID. */
    delete: operations["deleteFavorite"];
  };
  "/internal/v1/plats": {
    /**
     * Post plat.
     * @description Post plat.
     */
    post: operations["postPlat"];
  };
  "/internal/v1/timelines/{timeline_id}": {
    /**
     * get timeline
     * @description get timeline \
     * plat idの降順でplatの配列を取得する
     */
    get: operations["getTimeline"];
  };
  "/internal/v1/timelines": {
    /**
     * get timeline by query params
     * @description get timeline by query params \
     * 指定したクエリパラメータに一致するplatの配列を取得する
     */
    get: operations["getTimelineByQuery"];
  };
  "/internal/v1/images/{image_id}": {
    /**
     * get image
     * @description get image \
     * base64形式で返される
     */
    get: operations["getImage"];
  };
  "/internal/v1/images": {
    /**
     * upload image
     * @description upload image \
     * base64形式で受け取る
     */
    post: operations["uploadImage"];
  };
  "/internal/v1/login": {
    /**
     * login
     * @description login
     */
    post: operations["login"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description userを識別するための一意のID
     *
     * @example user_id
     */
    UserID: string;
    /** @description user */
    User: {
      user_id: components["schemas"]["UserID"];
      /**
       * @description 画面上に表示されるユーザ名
       * @example sample_actor
       */
      username: string;
      /**
       * @description ユーザのプロフィール
       * @example sample_actor
       */
      summary: string;
      /**
       * @description ユーザのアイコン画像のURL
       * @example https://xxx/external/v1/images/sample_actor.png
       */
      icon: string;
      /**
       * @description follower数
       * @example 20
       */
      followers_count: number;
      /**
       * @description following数
       * @example 20
       */
      following_count: number;
      /**
       * @description 公開アカウントであるかどうか \
       * external apiのmanuallyApprovesFollowersと同一の値となる
       *
       * @example true
       */
      is_public: boolean;
    };
    ErrorResponse: {
      /**
       * @example INTERNAL_SERVER_ERROR
       * @enum {string}
       */
      code: "BAD_REQUEST" | "MISSING_PARAMETER" | "UNAUTHORIZED" | "NOT_FOUND" | "INTERNAL_SERVER_ERROR" | "SERVICE_UNAVAILABLE" | "CONFLICT" | "UNPROCESSABLE_ENTITY";
      /** @example error message */
      message: string;
    };
    /** @description user without follow counts */
    UserLightweight: {
      user_id: components["schemas"]["UserID"];
      /**
       * @description 画面上に表示されるユーザ名
       * @example sample_user
       */
      username: string;
      /**
       * @description ユーザのプロフィール
       * @example sample_user
       */
      summary: string;
      /**
       * @description ユーザのアイコン画像のURL
       * @example https://xxx/external/v1/images/sample_user.png
       */
      icon: string;
      /**
       * @description 公開アカウントであるかどうか \
       * external apiのmanuallyApprovesFollowersと同一の値となる
       *
       * @example true
       */
      is_public: boolean;
    };
    /**
     * @description platを識別するための一意のID
     *
     * @example 550e8400-e29b-41d4-a716-446655440000
     */
    PlatID: string;
    /** @description plat */
    Plat: {
      plat_id: components["schemas"]["PlatID"];
      user_id?: components["schemas"]["UserID"];
      /**
       * @description platの本文
       * @example これはサンプルのplatです。
       */
      content: string;
      /** @description platに添付された画像のURL */
      image_urls?: string[];
      /**
       * @description platに対するリプライの数
       * @example 1
       */
      reply_count?: number;
      /**
       * @description platがリプラットされた数
       * @example 1
       */
      replat_count?: number;
      /**
       * @description platがお気に入りされた数
       * @example 1
       */
      favorite_count?: number;
      /**
       * Format: date-time
       * @description platが作成された日時(ISO8601)
       * @example 2024-01-01T00:00:00+09:00
       */
      created_at: string;
    };
    /** @description plat */
    PlatPost: {
      /**
       * @description platの本文
       * @example これはサンプルのplatです。
       */
      content: string;
      user_id: components["schemas"]["UserID"];
    };
  };
  responses: {
    /**
     * @description bad request \
     * error code:
     * - 'BAD_REQUEST'
     * - 'MISSING_PARAMETER'
     */
    E400: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /**
     * @description unauthorized \
     * error code:
     * - 'UNAUTHORIZED'
     */
    E401: {
      content: never;
    };
    /**
     * @description not found \
     * error code:
     * - 'NOT_FOUND'
     */
    E404: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /**
     * @description internal server error \
     * error code:
     * - 'INTERNAL_SERVER_ERROR'
     */
    E500: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /**
     * @description service unavailable \
     * error code:
     * - 'SERVICE_UNAVAILABLE'
     */
    E503: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /**
     * @description userを識別するための一意のID
     *
     * @example user_id
     */
    user_id: string;
    /**
     * @description userを識別するための一意のID。未指定の場合、先頭から取得
     *
     * @example user_pagination_id
     */
    user_pagination_id?: string;
    /**
     * @description 取得数。default = 100
     *
     * @example 100
     */
    limit?: number;
    /**
     * @description platを識別するための一意のID
     *
     * @example plat_id
     */
    plat_id: string;
    /**
     * @description timelineを識別するための一意のID
     *
     * @example timeline_id
     */
    timeline_id: string;
    timeline_user_id: string;
    timeline_type: "home" | "following" | "local";
    timeline_limit?: number;
    timeline_from_date?: string;
    timeline_to_date?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * get user
   * @description get user
   */
  getUser: {
    parameters: {
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete User by ID.
   * @description Delete User
   */
  deleteUser: {
    parameters: {
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description No content. */
      204: {
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get users.
   * @description Get users.
   */
  getUsers: {
    parameters: {
      query?: {
        /** @description ユーザ名 */
        user_name?: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create new user.
   * @description Create new user.
   */
  createUser: {
    /** @description 新規ユーザーのユーザ名とメールアドレス */
    requestBody?: {
      content: {
        "application/json": {
          /** @example stlatica taro */
          name?: string;
          /** @example stlatica.taro@example.com */
          email?: string;
        };
      };
    };
    responses: {
      /** @description Created. */
      201: {
        content: {
          "application/json": components["schemas"]["UserID"];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description user id conflict \
       * error code:
       * - 'CONFLICT'
       */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description user id or user name invalid \
       * error code:
       * - 'UNPROCESSABLE_ENTITY'
       */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get follow user list.
   * @description Get follow user list.
   */
  getFollowUsers: {
    parameters: {
      query?: {
        user_pagination_id?: components["parameters"]["user_pagination_id"];
        limit?: components["parameters"]["limit"];
      };
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["UserLightweight"][];
        };
      };
      400: components["responses"]["E400"];
      401: components["responses"]["E401"];
      404: components["responses"]["E404"];
      500: components["responses"]["E500"];
      503: components["responses"]["E503"];
    };
  };
  /**
   * Get follower list.
   * @description Get follower list.
   */
  getFollowers: {
    parameters: {
      query?: {
        user_pagination_id?: components["parameters"]["user_pagination_id"];
        limit?: components["parameters"]["limit"];
      };
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["UserLightweight"][];
        };
      };
      400: components["responses"]["E400"];
      401: components["responses"]["E401"];
      404: components["responses"]["E404"];
      500: components["responses"]["E500"];
      503: components["responses"]["E503"];
    };
  };
  /**
   * Add new follow user.
   * @description Add new follow user.
   */
  postFollow: {
    parameters: {
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      400: components["responses"]["E400"];
      401: components["responses"]["E401"];
      404: components["responses"]["E404"];
      500: components["responses"]["E500"];
      503: components["responses"]["E503"];
    };
  };
  /**
   * Delete follow user.
   * @description Delete follow user.
   */
  deleteFollow: {
    parameters: {
      path: {
        user_id: components["parameters"]["user_id"];
      };
    };
    responses: {
      /** @description No content. */
      204: {
        content: never;
      };
      400: components["responses"]["E400"];
      401: components["responses"]["E401"];
      404: components["responses"]["E404"];
      500: components["responses"]["E500"];
      503: components["responses"]["E503"];
    };
  };
  /**
   * Get plat by ID.
   * @description Returns plat.
   */
  getPlat: {
    parameters: {
      path: {
        plat_id: components["parameters"]["plat_id"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Plat"];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete plat by ID.
   * @description Delete plat.
   */
  deletePlat: {
    parameters: {
      path: {
        plat_id: components["parameters"]["plat_id"];
      };
    };
    responses: {
      /** @description No content. */
      204: {
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Add "favorite" to a specific plat by ID. */
  postFavorite: {
    parameters: {
      path: {
        plat_id: components["parameters"]["plat_id"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete "favorite" to a specific plat by ID. */
  deleteFavorite: {
    parameters: {
      path: {
        plat_id: components["parameters"]["plat_id"];
      };
    };
    responses: {
      /** @description No content. */
      204: {
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Post plat.
   * @description Post plat.
   */
  postPlat: {
    /** @description 投稿内容 */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlatPost"];
      };
    };
    responses: {
      /** @description Created. */
      201: {
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * get timeline
   * @description get timeline \
   * plat idの降順でplatの配列を取得する
   */
  getTimeline: {
    parameters: {
      path: {
        timeline_id: components["parameters"]["timeline_id"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Plat"][];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * get timeline by query params
   * @description get timeline by query params \
   * 指定したクエリパラメータに一致するplatの配列を取得する
   */
  getTimelineByQuery: {
    parameters: {
      query: {
        user_id: components["parameters"]["timeline_user_id"];
        type: components["parameters"]["timeline_type"];
        limit?: components["parameters"]["timeline_limit"];
        from_date?: components["parameters"]["timeline_from_date"];
        to_date?: components["parameters"]["timeline_to_date"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Plat"][];
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unprocessable entity \
       * error code:
       * - 'INVALID_PARAMETER'
       */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * get image
   * @description get image \
   * base64形式で返される
   */
  getImage: {
    parameters: {
      path: {
        /**
         * @description 画像ID
         * @example image_id
         */
        image_id: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "image/png": string;
          "image/jpeg": string;
          "image/gif": string;
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description not found \
       * error code:
       * - 'NOT_FOUND'
       */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * upload image
   * @description upload image \
   * base64形式で受け取る
   */
  uploadImage: {
    requestBody: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description created */
      201: {
        content: {
          "application/json": {
            /** @example image_id */
            image_id?: string;
          };
        };
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: never;
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * login
   * @description login
   */
  login: {
    requestBody: {
      content: {
        "application/json": {
          /** @example sample_userId */
          preferred_user_id?: string;
          /** @example password */
          password?: string;
        };
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          /**
           * @description Set-Cookieヘッダ \
           * ログイン情報を保持するためのCookie \
           * 有効期限は1時間 \
           * 保存する情報
           * ・token
           * 属性
           * ・Max-Age
           * ・Secure
           * ・httponly
           * ・HttpOnly
           * ・SameSite=Strict
           */
          "Set-Cookie"?: string;
        };
        content: never;
      };
      /**
       * @description bad request \
       * error code:
       * - 'BAD_REQUEST'
       * - 'MISSING_PARAMETER'
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description unauthorized \
       * error code:
       * - 'UNAUTHORIZED'
       */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description internal server error \
       * error code:
       * - 'INTERNAL_SERVER_ERROR'
       */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /**
       * @description service unavailable \
       * error code:
       * - 'SERVICE_UNAVAILABLE'
       */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
